<?php

/**
 * @file
 * Implements ETS Emoney payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_ets_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['ets_emoney'] = array(
    'base' => 'commerce_ets_emoney',
    'title' => t('ETS Emoney - Credit Card'),
    'short_title' => t('ETS Hosted Payments'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates ETS Hosted Payments'),
  );

  return $payment_methods;
}
/**
 * Returns the default settings for the ETS EMONEY payment method.
 */
function commerce_ets_emoney_default_settings() {
  return array(
    'api_key' => '',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_ets_emoney_settings_form($settings = NULL) {
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_ets_emoney_default_settings();
  $form = commerce_ets_emoney_base_settings_form($settings);
  return $form;
}

/**
 * Build common form for both payment method.
 */
function commerce_ets_emoney_base_settings_form($settings) {
  // Merge default settings into the stored settings array.
  $form = array();

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('Your ETS Hosted Payments API Key'),
    '#default_value' => $settings['api_key'],
    '#required' => TRUE,
    '#weight' => -5,
  );

  return $form;
}

/**
 * Load the ETS Payment PHP SDK library.
 *
 * @param object $payment_method
 *   The payment method instance definition array.
 *
 * @return object|bool
 *   The HostedPayments object or FALSE if the library could be loaded.
 */
function commerce_ets_emoney_get_library($payment_method) {
  $module_path = drupal_get_path('module', 'commerce_ets') . '/lib';
  require_once DRUPAL_ROOT . '/' . $module_path . '/v2/index.php';

  // If the library couldn't be loaded, or the API Key is empty.
  if (!class_exists('HostedPayments') || empty($payment_method['settings']['api_key']) || !defined('ECOM_ROOT_URL')) {
    return FALSE;
  }

  return new HostedPayments($payment_method['settings']['api_key']);
}

/**
 * Payment method callback: checkout form.
 */
function commerce_ets_emoney_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $library = commerce_ets_emoney_get_library($payment_method);
  // If the library couldn't be loaded, or the API Key is empty.
  if (!$library) {
    drupal_set_message(t('This payment method is currently unavailable.'), 'error');
    return array();
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $order_balance = commerce_payment_order_balance($order);
  $formatted_amount = number_format(commerce_currency_amount_to_decimal($order_balance['amount'], $order_balance['currency_code']), 2, '.', '');
  $session = $library->set('action', 'session')
    ->set('amount', $formatted_amount)
    ->send();

  if (!isset($session->id)) {
    drupal_set_message(t('This payment method is currently unavailable.'), 'error');
    return array();
  }

  $pane_form['#attached']['js'] = array(
    array(
      'data' => drupal_get_path('module', 'commerce_ets') . '/js/commerce_ets.js',
      'type' => 'file'
    ),
  );
  $pane_form['commerce_ets']['#markup'] = '<div id="commerce-ets-emoney-session-id" data-commerce-ets-sid="' . $session->id . '" class="element-invisible">&nbsp;</div>';
  $pane_form += commerce_payment_credit_card_form();
  $pane_form['credit_card']['transaction_id'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'class' => array(
        'commerce-ets-emoney-transaction-id',
      ),
    ),
  );

  $classes = array(
    'number' => 'ETSCardNumber',
    'exp_month' => 'ETSExpirationMonth',
    'exp_year' => 'ETSExpirationYear',
  );
  // Add the necessary classes in order for ETS to find our form elements.
  foreach (element_children($pane_form['credit_card']) as $element_key) {
    if (!isset($classes[$element_key])) {
      continue;
    }
    $pane_form['credit_card'][$element_key]['#attributes']['class'][] = $classes[$element_key];
  }

  return $pane_form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_ets_emoney_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (empty($pane_values['credit_card']['transaction_id']) || empty($_SESSION['HP_SESSION_ID'])) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_ets_emoney_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $library = commerce_ets_emoney_get_library($payment_method);
  $verify = $library->set('action', 'verify')
    ->set('sessionID', $_SESSION['HP_SESSION_ID'])
    ->set('transactionID', $pane_values['credit_card']['transaction_id'])
    ->send();

  $transaction = commerce_payment_transaction_new('ets_emoney', $order->order_id);
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  // Check if it's a successful transaction.
  if (!isset($verify->transactions->status) || $verify->transactions->status !== 'success') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->remote_status = $verify->transactions->status;
    $transaction->remote_id = $verify->transactions->id;
    $transaction->message = check_plain($verify->transactions->message);
  }
  commerce_payment_transaction_save($transaction);

  if ($transaction->status === COMMERCE_PAYMENT_STATUS_FAILURE) {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($verify->transactions->message), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_form_alter().
 *
 * This implementation alters any checkout form looking for the payment pane
 * and seeing if its details are currently for a credit card payment method. If
 * so, add the Javascript SDK to the page.
 */
function commerce_ets_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_checkout_form_') !== 0 ||
    !commerce_checkout_page_load(substr($form_id, 23))
  ) {
    return;
  }

  // Exit if the current page's form does no include the payment checkout pane.
  if (empty($form['commerce_payment']) || empty($form['commerce_payment']['payment_methods']['#value'])) {
    return;
  }

  // Add the js of the Javascript SDK.
  foreach ($form['commerce_payment']['payment_methods']['#value'] as $instance_id => $payment_method) {
    if (strpos($instance_id, 'ets_emoney') === 0 && !empty($payment_method['settings']['api_key'])) {
      $library = commerce_ets_emoney_get_library($payment_method);

      if ($library) {
        $form['#attached']['js'][] = array(
          'data' => ECOM_ROOT_URL . '/init',
          'type' => 'external',
        );
      }
      break;
    }
  }
}
